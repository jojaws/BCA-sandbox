/**
 * Controller: ViewRegistration_List
 * Purpose:
 *  - Powers the View Registration page for an Event.
 *  - Shows Confirmed/Attended by default; supports viewing Declined.
 *  - Deep linking supported: ?id=<EventId>&status=Declined
 *
 * API names used (adjust if your org differs):
 *  - Event object:        BCAP_Event__c
 *  - Registration object: BCAP_Event_Registration__c
 *  - Lookup to Event:     Event__c
 *  - Status field:        UpdateToUser__c  (values: 'Confirmed', 'Attended', 'Declined')
 */
public with sharing class ViewRegistration_List {

    // -------- Public props used by VF --------
    public BCAP_Event__c bcaEvent { get; private set; }
    public Contact con { get; private set; }

    /** Current filter: 'Confirmed' (default) or 'Declined'. */
    public String statusFilter { get; set; }   // default set in constructor

    // Keep the legacy name used in VF: {!EvntRegConfirmList}
    public List<BCAP_Event_Registration__c> getEvntRegConfirmList() {
        return (statusFilter == 'Declined') ? getEvntRegDeclinedList() : confirmedOrAttended;
    }

    // Explicit Declined list (handy if you add tabs/badges later)
    public List<BCAP_Event_Registration__c> getEvntRegDeclinedList() {
        return declined;
    }

    // Used by the page badge; respects current filter
    public Integer getTotalReg() {
        List<BCAP_Event_Registration__c> listToCount =
            (statusFilter == 'Declined') ? getEvntRegDeclinedList() : getEvntRegConfirmList();
        return (listToCount == null) ? 0 : listToCount.size();
    }

    // Optional helper if you want a single label in VF
    public String getFilterLabel() {
        if (statusFilter == 'Declined') return 'Declined';
        return (Date.today() > (bcaEvent != null ? bcaEvent.Event_Date__c : Date.today())) ? 'Attended' : 'Confirmed';
    }

    // -------- Private state --------
    private Id eventId;
    private List<BCAP_Event_Registration__c> confirmedOrAttended;
    private List<BCAP_Event_Registration__c> declined;

    // -------- Constructor --------
    public ViewRegistration_List() {
        statusFilter = 'Confirmed'; // <-- set default here

        initUserContact();

        eventId = getEventIdFromParams();
        if (eventId == null) {
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'No Event Id was provided.'));
            return;
        }

        loadEvent(eventId);
        if (bcaEvent == null) {
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Event not found or you do not have access.'));
            return;
        }

        loadRegistrationLists();
        initStatusFromUrl(); // allow ?status=Declined
    }

    // -------- Actions (for optional on-page toggle) --------
    public PageReference setFilterConfirmed() { statusFilter = 'Confirmed'; return null; }
    public PageReference setFilterDeclined()  { statusFilter = 'Declined';  return null; }

    // Back to Event button action
    public PageReference invitesomeoneelse() {
        PageReference p = Page.EventDetails; // change if your page name differs
        p.getParameters().put('id', (bcaEvent != null ? bcaEvent.Id : eventId));
        p.setRedirect(true);
        return p;
    }

    // -------- Loaders / helpers --------
    private void initUserContact() {
        User u = [
            SELECT Id, ContactId
            FROM User
            WHERE Id = :UserInfo.getUserId()
            LIMIT 1
        ];
        if (u.ContactId != null) {
            con = [SELECT Id FROM Contact WHERE Id = :u.ContactId LIMIT 1];
        }
    }

    private Id getEventIdFromParams() {
        String idParam = ApexPages.currentPage().getParameters().get('id');
        if (String.isBlank(idParam)) {
            idParam = ApexPages.currentPage().getParameters().get('eventId');
        }
        return String.isBlank(idParam) ? null : (Id)idParam;
    }

    private void initStatusFromUrl() {
        String s = ApexPages.currentPage().getParameters().get('status');
        if (!String.isBlank(s)) {
            s = s.trim();
            if (s.equalsIgnoreCase('declined')) {
                statusFilter = 'Declined';
            } else if (s.equalsIgnoreCase('confirmed') || s.equalsIgnoreCase('attended')) {
                statusFilter = 'Confirmed';
            }
        }
    }

    private void loadEvent(Id evtId) {
        List<BCAP_Event__c> evts = [
            SELECT Id, Name, Event_Date__c, Attendance_Criteria__c
            FROM BCAP_Event__c
            WHERE Id = :evtId
            LIMIT 1
        ];
        bcaEvent = evts.isEmpty() ? null : evts[0];
    }

    private void loadRegistrationLists() {
        // Only select fields actually used by VF to keep view state lean
        String baseFields =
            'Id,' +
            ' Contact__c, Contact__r.FirstName, Contact__r.LastName, Contact__r.Email,' +
            ' Contact__r.Account.Name,' +
            ' Member_Block__c, Member_Block__r.Account__r.Id, Member_Block__r.Account__r.Name,' +
            ' Guest_Of__c, Guest_Of__r.Name,' +
            ' Attendance_Type__c,' +
            ' UpdateToUser__c,' +
            ' Event__c';

        confirmedOrAttended = Database.query(
            'SELECT ' + baseFields +
            ' FROM BCAP_Event_Registration__c' +
            ' WHERE Event__c = :bcaEvent.Id' +
            '   AND UpdateToUser__c IN (\'Confirmed\', \'Attended\')' +
            ' ORDER BY Contact__r.LastName, Contact__r.FirstName'
        );

        declined = Database.query(
            'SELECT ' + baseFields +
            ' FROM BCAP_Event_Registration__c' +
            ' WHERE Event__c = :bcaEvent.Id' +
            '   AND UpdateToUser__c = \'Declined\'' +
            ' ORDER BY Contact__r.LastName, Contact__r.FirstName'
        );
    }
}
